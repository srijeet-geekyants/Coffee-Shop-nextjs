services:
  postgres:
    image: "postgres:latest"
    container_name: "postgres-${POSTGRES_DB}"
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - "${POSTGRES_PORT}:${POSTGRES_PORT}"
    networks:
      - monitoring
  mysql:
    image: "mysql:latest"
    container_name: "mysql-${MYSQL_DATABASE}"
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
    ports:
      - "${MYSQL_PORT}:${MYSQL_PORT}"
    networks:
      - monitoring
  redis:
    image: "redis:latest"
    container_name: "redis-${REDIS_PASSWORD}"
    ports:
      - "${REDIS_PORT}:${REDIS_PORT}"
    volumes:
      - ./data/redis:/data
    restart: unless-stopped
    environment:
      REDIS_PASSWORD: ${REDIS_PASSWORD}
    command: [
        "redis-server",
        "--requirepass",
        "${REDIS_PASSWORD}", # Enable password if provided
        "--appendonly",
        "yes", # Enable AOF for data persistence (optional)
      ]
    user: "redis"
    networks:
      - monitoring

networks:
  monitoring:
    driver: bridge
