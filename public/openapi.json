{
  "openapi": "3.0.0",
  "info": {
    "title": "API Documentation",
    "version": "1.0.0",
    "description": "This is the OpenAPI specification for your project."
  },
  "servers": [
    {
      "url": "http://localhost:3000/api",
      "description": "Local development server"
    }
  ],
  "components": {
    "securitySchemes": {
      "BearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    },
    "schemas": {
      "OpenApiParams": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "OpenApi ID"
          }
        },
        "required": [
          "id"
        ]
      },
      "OpenApiResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "OpenApi ID"
          },
          "name": {
            "type": "string",
            "description": "OpenApi name"
          },
          "price": {
            "type": "number",
            "minimum": 0,
            "exclusiveMinimum": true,
            "description": "OpenApi price"
          }
        },
        "required": [
          "id",
          "name",
          "price"
        ]
      }
    },
    "responses": {
      "400": {
        "description": "Bad Request",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "string",
                  "example": "Invalid request parameters"
                },
                "code": {
                  "type": "string",
                  "example": "400"
                }
              }
            }
          }
        }
      },
      "401": {
        "description": "Unauthorized",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "string",
                  "example": "Authentication required"
                },
                "code": {
                  "type": "string",
                  "example": "401"
                }
              }
            }
          }
        }
      },
      "403": {
        "description": "Forbidden",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "string",
                  "example": "Access denied"
                },
                "code": {
                  "type": "string",
                  "example": "403"
                }
              }
            }
          }
        }
      },
      "404": {
        "description": "Not Found",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "string",
                  "example": "Resource not found"
                },
                "code": {
                  "type": "string",
                  "example": "404"
                }
              }
            }
          }
        }
      },
      "409": {
        "description": "Conflict",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "string",
                  "example": "Resource already exists"
                },
                "code": {
                  "type": "string",
                  "example": "409"
                }
              }
            }
          }
        }
      },
      "500": {
        "description": "Internal Server Error",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "string",
                  "example": "An unexpected error occurred"
                },
                "code": {
                  "type": "string",
                  "example": "500"
                }
              }
            }
          }
        }
      }
    }
  },
  "paths": {
    "/health": {
      "get": {
        "operationId": "get-health",
        "summary": "Simple health check endpoint",
        "description": "",
        "tags": [
          "Health"
        ],
        "parameters": [],
        "responses": {
          "400": {
            "$ref": "#/components/responses/400"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/openapi/{id}": {
      "get": {
        "operationId": "get-openapi-{id}",
        "summary": "Get OpenApi information",
        "description": "Fetches detailed OpenApi information by ID",
        "tags": [
          "Openapi"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string",
              "description": "OpenApi ID"
            },
            "required": true,
            "description": "OpenApi ID",
            "example": "123"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenApiResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/sentry-example-api": {
      "get": {
        "operationId": "get-sentry-example-api",
        "summary": "A faulty API route to test Sentry's error monitoring",
        "description": "",
        "tags": [
          "Sentry-example-api"
        ],
        "parameters": [],
        "responses": {
          "400": {
            "$ref": "#/components/responses/400"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/simple-users": {
      "get": {
        "operationId": "get-simple-users",
        "summary": "Simple GET endpoint that returns 2 hardcoded users",
        "description": "",
        "tags": [
          "Simple-users"
        ],
        "parameters": [],
        "responses": {
          "400": {
            "$ref": "#/components/responses/400"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/users": {
      "get": {
        "operationId": "get-users",
        "summary": "GET /api/users - Fetch all users",
        "description": "",
        "tags": [
          "Users"
        ],
        "parameters": [],
        "responses": {
          "400": {
            "$ref": "#/components/responses/400"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "delete": {
        "operationId": "delete-users",
        "summary": "DELETE /api/users - Reset all users (for testing)",
        "description": "",
        "tags": [
          "Users"
        ],
        "parameters": [],
        "responses": {
          "400": {
            "$ref": "#/components/responses/400"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "post": {
        "operationId": "post-users",
        "summary": "POST /api/users - Create a new user",
        "description": "",
        "tags": [
          "Users"
        ],
        "parameters": [],
        "responses": {
          "400": {
            "$ref": "#/components/responses/400"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    }
  }
}